{
	"info": {
		"_postman_id": "04f29652-fe1f-4439-a164-548fde8d8c55",
		"name": "Assurdly QA Training",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38019053"
	},
	"item": [
		{
			"name": "GET - List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains users data\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.data).to.be.an('array');\r",
							"    pm.expect(responseJson.data.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"First user has required fields\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.data[0]).to.have.property('id');\r",
							"    pm.expect(responseJson.data[0]).to.have.property('email');\r",
							"    pm.expect(responseJson.data[0]).to.have.property('first_name');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users?page=1&per_page=60",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "per_page",
							"value": "60"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"User data is returned\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    const expectedUserId = pm.collectionVariables.get(\"user_id\");\r",
							"    \r",
							"    if (expectedUserId) {\r",
							"        pm.expect(responseJson.data).to.have.property('id', parseInt(expectedUserId));\r",
							"    } else {\r",
							"        pm.expect(responseJson.data).to.have.property('id');\r",
							"    }\r",
							"    \r",
							"    pm.expect(responseJson.data).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET - Single User (Not Found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is Not Found\", function () {\r",
							"    pm.expect(pm.response.status).to.eql(\"Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty object\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(Object.keys(responseJson).length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/837",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"837"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST - Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is Created\", function () {\r",
							"    pm.expect(pm.response.status).to.eql(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"User created successfully\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('username', 'olamide');\r",
							"    pm.expect(responseJson).to.have.property('email', 'olamide@lendsqr.com');\r",
							"    pm.expect(responseJson).to.have.property('id');\r",
							"    pm.expect(responseJson).to.have.property('createdAt');\r",
							"    \r",
							"    // Store the created user ID for use in other requests\r",
							"    pm.collectionVariables.set(\"new_user_id\", responseJson.id);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has all required fields\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.all.keys('username', 'email', 'password', 'id', 'createdAt');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"olamide\",\r\n  \"email\": \"olamide@lendsqr.com\",\r\n  \"password\": \"pwd\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST - Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is Created\", function () {\r",
							"    pm.expect(pm.response.status).to.eql(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Registration successful\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('id');\r",
							"    pm.expect(responseJson).to.have.property('email');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"olamide\",\r\n  \"email\": \"olamide@lendsqr.com\",\r\n  \"password\": \"pwd\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST - Register User (Missing Password)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is Bad Request\", function () {\r",
							"    pm.expect(pm.response.status).to.eql(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error message returned\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('error', 'Missing password');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"olamide\",\r\n    \"email\": \"olamide@lendsqr.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT - Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"User updated successfully\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('name', 'Jane Smith');\r",
							"    pm.expect(responseJson).to.have.property('job', 'Senior QA Engineer');\r",
							"    pm.expect(responseJson).to.have.property('updatedAt');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated timestamp is recent\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    const updatedAt = new Date(responseJson.updatedAt);\r",
							"    const now = new Date();\r",
							"    const timeDiff = Math.abs(now - updatedAt);\r",
							"    pm.expect(timeDiff).to.be.below(5000); // Within 5 seconds\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Jane Smith\",\r\n    \"job\": \"Senior QA Engineer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH - Partial Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"User partially updated\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('job', 'Lead QA Engineer');\r",
							"    pm.expect(responseJson).to.have.property('updatedAt');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"job\": \"Lead QA Engineer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE - Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is No Content\", function () {\r",
							"    pm.expect(pm.response.status).to.eql(\"No Content\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is acceptable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "reqres-free-v1",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "new_user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_user_id",
			"value": ""
		}
	]
}